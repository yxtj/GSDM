// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_common_2eproto() {
  delete Arg::default_instance_;
  delete Args::default_instance_;
  delete Record::default_instance_;
  delete Records::default_instance_;
  delete FileParams::default_instance_;
  delete ConfigData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Arg::default_instance_ = new Arg();
  Args::default_instance_ = new Args();
  Record::default_instance_ = new Record();
  Records::default_instance_ = new Records();
  FileParams::default_instance_ = new FileParams();
  ConfigData::default_instance_ = new ConfigData();
  Arg::default_instance_->InitAsDefaultInstance();
  Args::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  Records::default_instance_->InitAsDefaultInstance();
  FileParams::default_instance_->InitAsDefaultInstance();
  ConfigData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
#endif
bool CompressionFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

static ::std::string* MutableUnknownFieldsForArg(
    Arg* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arg::kKeyFieldNumber;
const int Arg::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arg::Arg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arg)
}

void Arg::InitAsDefaultInstance() {
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Arg)
}

void Arg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  // @@protoc_insertion_point(destructor:Arg)
  SharedDtor();
}

void Arg::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Arg& Arg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New(::google::protobuf::Arena* arena) const {
  Arg* n = new Arg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:Arg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForArg, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Arg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arg)
  return false;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arg)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Arg)
}

int Arg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Arg)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int Arg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Arg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Arg*>(&from));
}

void Arg::MergeFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Arg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Arg::CopyFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Arg::Swap(Arg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arg::InternalSwap(Arg* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Arg::GetTypeName() const {
  return "Arg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Arg

// required bytes key = 1;
bool Arg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Arg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Arg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Arg::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Arg::key() const {
  // @@protoc_insertion_point(field_get:Arg.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arg.key)
}
 void Arg::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arg.key)
}
 void Arg::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arg.key)
}
 ::std::string* Arg::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Arg.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Arg::release_key() {
  // @@protoc_insertion_point(field_release:Arg.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Arg.key)
}

// required bytes value = 2;
bool Arg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Arg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Arg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Arg::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Arg::value() const {
  // @@protoc_insertion_point(field_get:Arg.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arg.value)
}
 void Arg::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arg.value)
}
 void Arg::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arg.value)
}
 ::std::string* Arg::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Arg.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Arg::release_value() {
  // @@protoc_insertion_point(field_release:Arg.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Arg.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForArgs(
    Args* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Args::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Args::Args()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Args)
}

void Args::InitAsDefaultInstance() {
}

Args::Args(const Args& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Args)
}

void Args::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Args::~Args() {
  // @@protoc_insertion_point(destructor:Args)
  SharedDtor();
}

void Args::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Args& Args::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Args* Args::default_instance_ = NULL;

Args* Args::New(::google::protobuf::Arena* arena) const {
  Args* n = new Args;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Args::Clear() {
// @@protoc_insertion_point(message_clear_start:Args)
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForArgs, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Args)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Arg param = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Args)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Args)
  return false;
#undef DO_
}

void Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Args)
  // repeated .Arg param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->param(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Args)
}

int Args::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Args)
  int total_size = 0;

  // repeated .Arg param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Args::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Args*>(&from));
}

void Args::MergeFrom(const Args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Args)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  param_.MergeFrom(from.param_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Args::CopyFrom(const Args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Args::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Args::Swap(Args* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Args::InternalSwap(Args* other) {
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Args::GetTypeName() const {
  return "Args";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Args

// repeated .Arg param = 1;
int Args::param_size() const {
  return param_.size();
}
void Args::clear_param() {
  param_.Clear();
}
const ::Arg& Args::param(int index) const {
  // @@protoc_insertion_point(field_get:Args.param)
  return param_.Get(index);
}
::Arg* Args::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:Args.param)
  return param_.Mutable(index);
}
::Arg* Args::add_param() {
  // @@protoc_insertion_point(field_add:Args.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::Arg >*
Args::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:Args.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::Arg >&
Args::param() const {
  // @@protoc_insertion_point(field_list:Args.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRecord(
    Record* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kKeyFieldNumber;
const int Record::kValue1FieldNumber;
const int Record::kValue2FieldNumber;
const int Record::kValue3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:Record)
  SharedDtor();
}

void Record::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Record& Record::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:Record)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value1()) {
      value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value2()) {
      value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value3()) {
      value3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRecord, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value1;
        break;
      }

      // required bytes value1 = 2;
      case 2: {
        if (tag == 18) {
         parse_value1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value2;
        break;
      }

      // required bytes value2 = 3;
      case 3: {
        if (tag == 26) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value3;
        break;
      }

      // required bytes value3 = 4;
      case 4: {
        if (tag == 34) {
         parse_value3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Record)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value1 = 2;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value1(), output);
  }

  // required bytes value2 = 3;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value2(), output);
  }

  // required bytes value3 = 4;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value3(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Record)
}

int Record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Record)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value1()) {
    // required bytes value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value1());
  }

  if (has_value2()) {
    // required bytes value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value2());
  }

  if (has_value3()) {
    // required bytes value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value3());
  }

  return total_size;
}
int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Record)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value1());

    // required bytes value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value2());

    // required bytes value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Record*>(&from));
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value1()) {
      set_has_value1();
      value1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value1_);
    }
    if (from.has_value2()) {
      set_has_value2();
      value2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value2_);
    }
    if (from.has_value3()) {
      set_has_value3();
      value3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value3_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  key_.Swap(&other->key_);
  value1_.Swap(&other->value1_);
  value2_.Swap(&other->value2_);
  value3_.Swap(&other->value3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Record::GetTypeName() const {
  return "Record";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// required bytes key = 1;
bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:Record.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.key)
}
 void Record::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.key)
}
 void Record::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.key)
}
 ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:Record.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Record.key)
}

// required bytes value1 = 2;
bool Record::has_value1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Record::set_has_value1() {
  _has_bits_[0] |= 0x00000002u;
}
void Record::clear_has_value1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Record::clear_value1() {
  value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value1();
}
 const ::std::string& Record::value1() const {
  // @@protoc_insertion_point(field_get:Record.value1)
  return value1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value1(const ::std::string& value) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.value1)
}
 void Record::set_value1(const char* value) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.value1)
}
 void Record::set_value1(const void* value, size_t size) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.value1)
}
 ::std::string* Record::mutable_value1() {
  set_has_value1();
  // @@protoc_insertion_point(field_mutable:Record.value1)
  return value1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value1() {
  // @@protoc_insertion_point(field_release:Record.value1)
  clear_has_value1();
  return value1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value1(::std::string* value1) {
  if (value1 != NULL) {
    set_has_value1();
  } else {
    clear_has_value1();
  }
  value1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value1);
  // @@protoc_insertion_point(field_set_allocated:Record.value1)
}

// required bytes value2 = 3;
bool Record::has_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Record::set_has_value2() {
  _has_bits_[0] |= 0x00000004u;
}
void Record::clear_has_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Record::clear_value2() {
  value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value2();
}
 const ::std::string& Record::value2() const {
  // @@protoc_insertion_point(field_get:Record.value2)
  return value2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value2(const ::std::string& value) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.value2)
}
 void Record::set_value2(const char* value) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.value2)
}
 void Record::set_value2(const void* value, size_t size) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.value2)
}
 ::std::string* Record::mutable_value2() {
  set_has_value2();
  // @@protoc_insertion_point(field_mutable:Record.value2)
  return value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value2() {
  // @@protoc_insertion_point(field_release:Record.value2)
  clear_has_value2();
  return value2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value2(::std::string* value2) {
  if (value2 != NULL) {
    set_has_value2();
  } else {
    clear_has_value2();
  }
  value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:Record.value2)
}

// required bytes value3 = 4;
bool Record::has_value3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Record::set_has_value3() {
  _has_bits_[0] |= 0x00000008u;
}
void Record::clear_has_value3() {
  _has_bits_[0] &= ~0x00000008u;
}
void Record::clear_value3() {
  value3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value3();
}
 const ::std::string& Record::value3() const {
  // @@protoc_insertion_point(field_get:Record.value3)
  return value3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value3(const ::std::string& value) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Record.value3)
}
 void Record::set_value3(const char* value) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Record.value3)
}
 void Record::set_value3(const void* value, size_t size) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Record.value3)
}
 ::std::string* Record::mutable_value3() {
  set_has_value3();
  // @@protoc_insertion_point(field_mutable:Record.value3)
  return value3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value3() {
  // @@protoc_insertion_point(field_release:Record.value3)
  clear_has_value3();
  return value3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value3(::std::string* value3) {
  if (value3 != NULL) {
    set_has_value3();
  } else {
    clear_has_value3();
  }
  value3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value3);
  // @@protoc_insertion_point(field_set_allocated:Record.value3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRecords(
    Records* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Records::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Records::Records()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Records)
}

void Records::InitAsDefaultInstance() {
}

Records::Records(const Records& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Records)
}

void Records::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:Records)
  SharedDtor();
}

void Records::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Records& Records::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Records* Records::default_instance_ = NULL;

Records* Records::New(::google::protobuf::Arena* arena) const {
  Records* n = new Records;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:Records)
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRecords, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Records)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Record param = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Records)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Records)
  return false;
#undef DO_
}

void Records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Records)
  // repeated .Record param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->param(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Records)
}

int Records::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Records)
  int total_size = 0;

  // repeated .Record param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Records::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Records*>(&from));
}

void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Records)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  param_.MergeFrom(from.param_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Records::Swap(Records* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Records::InternalSwap(Records* other) {
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Records::GetTypeName() const {
  return "Records";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Records

// repeated .Record param = 1;
int Records::param_size() const {
  return param_.size();
}
void Records::clear_param() {
  param_.Clear();
}
const ::Record& Records::param(int index) const {
  // @@protoc_insertion_point(field_get:Records.param)
  return param_.Get(index);
}
::Record* Records::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:Records.param)
  return param_.Mutable(index);
}
::Record* Records::add_param() {
  // @@protoc_insertion_point(field_add:Records.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::Record >*
Records::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:Records.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::Record >&
Records::param() const {
  // @@protoc_insertion_point(field_list:Records.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFileParams(
    FileParams* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileParams::kAttrFieldNumber;
const int FileParams::kCompressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileParams::FileParams()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileParams)
}

void FileParams::InitAsDefaultInstance() {
}

FileParams::FileParams(const FileParams& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FileParams)
}

void FileParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compression_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileParams::~FileParams() {
  // @@protoc_insertion_point(destructor:FileParams)
  SharedDtor();
}

void FileParams::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FileParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileParams& FileParams::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

FileParams* FileParams::default_instance_ = NULL;

FileParams* FileParams::New(::google::protobuf::Arena* arena) const {
  FileParams* n = new FileParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileParams::Clear() {
// @@protoc_insertion_point(message_clear_start:FileParams)
  compression_ = 0;
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForFileParams, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:FileParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Arg attr = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_compression;
        break;
      }

      // optional int32 compression = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_)));
          set_has_compression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileParams)
  return false;
#undef DO_
}

void FileParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileParams)
  // repeated .Arg attr = 1;
  for (unsigned int i = 0, n = this->attr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->attr(i), output);
  }

  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->compression(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:FileParams)
}

int FileParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FileParams)
  int total_size = 0;

  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compression());
  }

  // repeated .Arg attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileParams*>(&from));
}

void FileParams::MergeFrom(const FileParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FileParams::CopyFrom(const FileParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileParams::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void FileParams::Swap(FileParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileParams::InternalSwap(FileParams* other) {
  attr_.UnsafeArenaSwap(&other->attr_);
  std::swap(compression_, other->compression_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileParams::GetTypeName() const {
  return "FileParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileParams

// repeated .Arg attr = 1;
int FileParams::attr_size() const {
  return attr_.size();
}
void FileParams::clear_attr() {
  attr_.Clear();
}
const ::Arg& FileParams::attr(int index) const {
  // @@protoc_insertion_point(field_get:FileParams.attr)
  return attr_.Get(index);
}
::Arg* FileParams::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:FileParams.attr)
  return attr_.Mutable(index);
}
::Arg* FileParams::add_attr() {
  // @@protoc_insertion_point(field_add:FileParams.attr)
  return attr_.Add();
}
::google::protobuf::RepeatedPtrField< ::Arg >*
FileParams::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:FileParams.attr)
  return &attr_;
}
const ::google::protobuf::RepeatedPtrField< ::Arg >&
FileParams::attr() const {
  // @@protoc_insertion_point(field_list:FileParams.attr)
  return attr_;
}

// optional int32 compression = 2 [default = 0];
bool FileParams::has_compression() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileParams::set_has_compression() {
  _has_bits_[0] |= 0x00000002u;
}
void FileParams::clear_has_compression() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileParams::clear_compression() {
  compression_ = 0;
  clear_has_compression();
}
 ::google::protobuf::int32 FileParams::compression() const {
  // @@protoc_insertion_point(field_get:FileParams.compression)
  return compression_;
}
 void FileParams::set_compression(::google::protobuf::int32 value) {
  set_has_compression();
  compression_ = value;
  // @@protoc_insertion_point(field_set:FileParams.compression)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForConfigData(
    ConfigData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigData::kNumWorkersFieldNumber;
const int ConfigData::kWorkerIdFieldNumber;
const int ConfigData::kMasterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigData::ConfigData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigData)
}

void ConfigData::InitAsDefaultInstance() {
}

ConfigData::ConfigData(const ConfigData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigData)
}

void ConfigData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_workers_ = 0;
  worker_id_ = 0;
  master_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigData::~ConfigData() {
  // @@protoc_insertion_point(destructor:ConfigData)
  SharedDtor();
}

void ConfigData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfigData& ConfigData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ConfigData* ConfigData::default_instance_ = NULL;

ConfigData* ConfigData::New(::google::protobuf::Arena* arena) const {
  ConfigData* n = new ConfigData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_workers_, master_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForConfigData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ConfigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_workers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
          set_has_num_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worker_id;
        break;
      }

      // required int32 worker_id = 2;
      case 2: {
        if (tag == 16) {
         parse_worker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_id_)));
          set_has_worker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master_id;
        break;
      }

      // required int32 master_id = 3;
      case 3: {
        if (tag == 24) {
         parse_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigData)
  return false;
#undef DO_
}

void ConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigData)
  // required int32 num_workers = 1;
  if (has_num_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_workers(), output);
  }

  // required int32 worker_id = 2;
  if (has_worker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worker_id(), output);
  }

  // required int32 master_id = 3;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->master_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ConfigData)
}

int ConfigData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConfigData)
  int total_size = 0;

  if (has_num_workers()) {
    // required int32 num_workers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_workers());
  }

  if (has_worker_id()) {
    // required int32 worker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_id());
  }

  if (has_master_id()) {
    // required int32 master_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->master_id());
  }

  return total_size;
}
int ConfigData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 num_workers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_workers());

    // required int32 worker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_id());

    // required int32 master_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->master_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfigData*>(&from));
}

void ConfigData::MergeFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_workers()) {
      set_num_workers(from.num_workers());
    }
    if (from.has_worker_id()) {
      set_worker_id(from.worker_id());
    }
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ConfigData::CopyFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConfigData::Swap(ConfigData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigData::InternalSwap(ConfigData* other) {
  std::swap(num_workers_, other->num_workers_);
  std::swap(worker_id_, other->worker_id_);
  std::swap(master_id_, other->master_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ConfigData::GetTypeName() const {
  return "ConfigData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigData

// required int32 num_workers = 1;
bool ConfigData::has_num_workers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigData::set_has_num_workers() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigData::clear_has_num_workers() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigData::clear_num_workers() {
  num_workers_ = 0;
  clear_has_num_workers();
}
 ::google::protobuf::int32 ConfigData::num_workers() const {
  // @@protoc_insertion_point(field_get:ConfigData.num_workers)
  return num_workers_;
}
 void ConfigData::set_num_workers(::google::protobuf::int32 value) {
  set_has_num_workers();
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:ConfigData.num_workers)
}

// required int32 worker_id = 2;
bool ConfigData::has_worker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigData::set_has_worker_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigData::clear_has_worker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigData::clear_worker_id() {
  worker_id_ = 0;
  clear_has_worker_id();
}
 ::google::protobuf::int32 ConfigData::worker_id() const {
  // @@protoc_insertion_point(field_get:ConfigData.worker_id)
  return worker_id_;
}
 void ConfigData::set_worker_id(::google::protobuf::int32 value) {
  set_has_worker_id();
  worker_id_ = value;
  // @@protoc_insertion_point(field_set:ConfigData.worker_id)
}

// required int32 master_id = 3;
bool ConfigData::has_master_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigData::set_has_master_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigData::clear_has_master_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigData::clear_master_id() {
  master_id_ = 0;
  clear_has_master_id();
}
 ::google::protobuf::int32 ConfigData::master_id() const {
  // @@protoc_insertion_point(field_get:ConfigData.master_id)
  return master_id_;
}
 void ConfigData::set_master_id(::google::protobuf::int32 value) {
  set_has_master_id();
  master_id_ = value;
  // @@protoc_insertion_point(field_set:ConfigData.master_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
